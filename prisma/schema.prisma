datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  groups              UsersInGroups[]
  scores              Score[]
  discoveredLocations Location[]
  choosenLunches      Lunch[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users   UsersInGroups[]
  lunches Lunch[]
}

model UsersInGroups {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  role String @default("USER")

  joinedAt DateTime @default(now())

  @@id([userId, groupId])
}

model Location {
  id      String @id @default(cuid())
  name    String
  lon     String
  lat     String
  address String

  discoveredBy   User   @relation(fields: [discoveredById], references: [id])
  discoveredById String

  lunches Lunch[]
}

model Lunch {
  id   String   @id @default(cuid())
  date DateTime

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  scores Score[]

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  choosenBy User   @relation(fields: [userId], references: [id])
  userId    String
}

model Score {
  id    String @id @default(cuid())
  score Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  lunch   Lunch  @relation(fields: [lunchId], references: [id])
  lunchId String

  comment String?
}
