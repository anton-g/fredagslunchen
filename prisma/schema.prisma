datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Email {
  id    Int    @id @default(autoincrement())
  email String @unique
  user  User[]
}

model User {
  id      String @id @default(cuid())
  email   Email? @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId Int?
  name    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role String @default("USER") // USER, ADMIN, ANONYMOUS

  password           Password?
  passwordResetToken String?
  passwordResetTime  DateTime?

  groups              GroupMember[]
  scores              Score[]
  choosenLunches      Lunch[]
  discoveredLocations GroupLocation[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inviteToken String? @unique

  members        GroupMember[]
  groupLocations GroupLocation[]
}

model GroupMember {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  role String @default("MEMBER") // MEMBER, ADMIN

  joinedAt DateTime @default(now())

  @@id([userId, groupId])
}

model GroupLocation {
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  lunches Lunch[]

  discoveredBy   User   @relation(fields: [discoveredById], references: [id])
  discoveredById String

  @@id([locationId, groupId])
}

model Location {
  id      Int    @id @default(autoincrement())
  name    String
  lon     String
  lat     String
  address String
  city    String
  zipCode String

  groupLocation GroupLocation[]
}

model Lunch {
  id   Int      @id @default(autoincrement())
  date DateTime

  scores Score[]

  groupLocation           GroupLocation @relation(fields: [groupLocationLocationId, groupLocationGroupId], references: [locationId, groupId], onDelete: Cascade)
  groupLocationLocationId Int
  groupLocationGroupId    String

  choosenBy       User   @relation(fields: [choosenByUserId], references: [id])
  choosenByUserId String @map("userId")
}

model Score {
  id    Int   @id @default(autoincrement())
  score Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  lunch   Lunch @relation(fields: [lunchId], references: [id], onDelete: Cascade)
  lunchId Int

  comment String?

  @@unique([userId, lunchId])
}
